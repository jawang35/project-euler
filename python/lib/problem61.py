'''
Problem 61 - Cyclical Figurate Numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:

Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square          P4,n=n**2           1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first
two digits of the next number (including the last number with the first).
2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
pentagonal (P5,44=2882), is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.
'''

from itertools import chain
from lib.helpers.runtime import print_answer_and_elapsed_time


def figurate_numbers(formula, start, end):
    numbers = set()
    n = 1

    while True:
        number = int(formula(n))

        if number >= end:
            return numbers

        if number >= start:
            numbers.add(number)

        n += 1


def answer():
    triangle = figurate_numbers(lambda n: n * (n + 1) / 2, 1000, 10000)
    square = figurate_numbers(lambda n: n * n, 1000, 10000)
    pentagonal = figurate_numbers(lambda n: n * (3 * n - 1) / 2, 1000, 10000)
    hexagonal = figurate_numbers(lambda n: n * (2 * n - 1), 1000, 10000)
    heptagonal = figurate_numbers(lambda n: n * (5 * n - 3) / 2, 1000, 10000)
    octagonal = figurate_numbers(lambda n: n * (3 * n - 2), 1000, 10000)

    two_digit_number_map = {}

    for number in chain(triangle, square, pentagonal, hexagonal, heptagonal, octagonal):
        two_digit_key = str(number)[:2]

        if two_digit_key not in two_digit_number_map:
            two_digit_number_map[two_digit_key] = set()

        two_digit_number_map[two_digit_key].add(number)

    for n1 in chain(triangle, square, pentagonal, hexagonal, heptagonal, octagonal):
        for n2 in two_digit_number_map[str(n1)[:2]]:
            for n3 in two_digit_number_map[str(n2)[:2]]:
                for n4 in two_digit_number_map[str(n3)[:2]]:
                    for n5 in two_digit_number_map[str(n4)[:2]]:
                        for n6 in two_digit_number_map[str(n5)[:2]]:
                            figurate_types = {triangle, square, pentagonal, hexagonal, heptagonal, octagonal}
                            numbers = [n1, n2, n3, n4, n5, n6]
                            i = 0
                            while len(figurate_types) > 0:
                                for figurate_type in figurate_types:
                            print(n1, n2, n3, n4, n5, n6)
                            # figurate_types = {triangle, square, pentagonal, hexagonal, heptagonal, octagonal}

        # numbers = {number}
        #
        #
        # figurate_types = {triangle, square, pentagonal, hexagonal, heptagonal, octagonal}
        #
        # while len(figurate_types) > 0:
        #     found = False
        #     for figurate_type in figurate_types:
        #         if number in figurate_type:
        #             found = True
        #             numbers.append(number)
        #             figurate_types.remove(figurate_type)
        #             break
        #
        #     if not found:
        #         break
        #
        # if len(figurate_types) == 0:
        #     return numbers


if __name__ == '__main__':
    print_answer_and_elapsed_time(answer)
